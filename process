#!/usr/bin/env python

# 
# Implements a monitoring loop for a process managed by a PLC:
# 
#     While (GetPLCTagVal('TriggerBool') != 1)
#         sleep 0.02 # 50ms
#     
#     print("At last, I've been triggered!")
#     SetPLCTagVal('TriggerBool',0)  # PLC Sees bit going off, Knows process is started
#     print ('Now processing unit No ' + GetPLCTagVal('SerialNo'))
#     sleep(10)#Processing done here
#     SetPLCTagVal('DoneBool',1) # PLC Sees bit going ON, Knows processing is finished
# 
# 
from __future__ import print_function

import argparse
import random
import time
import logging

import cpppo
from cpppo.server.enip import client

def SetPLCTagVal( conn, tag, val, tag_type="INT", timeout=None ):
    """Set a tag to a list of values.  Even if the tag is a scalar, the value must be provided as a
    list.

    """
    tags			= [ "%s=(%s)%s" % ( tag, tag_type, ','.join( map( str, val ))) ]
    operations			= client.parse_operations( tags )
    failures,transactions	= conn.process( operations=operations, timeout=timeout )
    assert failures == 0, "Failed to successfully set %s = %s" % ( tag, val )


def GetPLCTagVal( conn, *tags, **kwds ):
    """Get 1 or more tags, and yield the results (each will be a list of values).  Since the values for
    all the specified tag(s) come back as a sequence, you must assign the result to a tuple:

        a,	= GetPLCTagVal( conn, "Tag_A", timeout=1.0 )
        a,b,c	= GetPLCTagVal( conn, "Tag_A", "Tag_B", "Tag_C", timeout=1.0 )

    Raises an Exception on the first failure; the connection must be destroyed and re-opened (since
    it is left in an indeterminate state, potentially with un-received replies).

    """
    timeout			= kwds.pop( 'timeout', None )
    multiple			= kwds.pop( 'multiple', 0 )
    assert not kwds, "Unrecognized keywords: %s" % ( kwds )

    operations			= client.parse_operations( tags )
    for idx,dsc,req,rpy,sts,val in conn.synchronous(
            operations=operations, multiple=multiple, timeout=timeout ):
        assert sts == 0, "Failed to successfully get %s" % ( dsc )
        #print( "%s == %s (w/ status: %s)" % ( dsc, val, sts ))
        yield val


def process( host, timeout=None ):
    """Connect to a Controller, and process each 'SerialNo' (a DINT), after 'TriggerBool' (a SINT) is
    set.  When complete, set 'DoneBool' (an SINT).

    """
    with client.connector( host=args.address, timeout=timeout ) as conn:
        while True:
            print("Awaiting triggering of next unit...")
            trigger		= None
            while trigger != [1]:
                if trigger is not None:
                    time.sleep( .02 )
                trigger,	= GetPLCTagVal( conn, 'TriggerBool', timeout=timeout )
            print( "At last, I've been triggered: %s!" % ( trigger ))

            # PLC Sees bit going off, Knows process is started
            SetPLCTagVal( conn, 'TriggerBool', [0], tag_type='SINT', timeout=timeout )
            serial,		= GetPLCTagVal( conn, 'SerialNo', timeout=timeout )

            # sleep(10)#Processing done here
            delay		= random.randint( 1, 10 )
            print( "Now processing unit No %s (for %ss)..." % ( serial[0], delay ))
            time.sleep( delay )

            # PLC Sees bit going ON, Knows processing is finished
            SetPLCTagVal( conn, 'DoneBool', [1], tag_type='SINT', timeout=timeout )
            print( "Processing unit No %s complete" % ( serial ))

if __name__ == "__main__":
    
    ap				= argparse.ArgumentParser()
    ap.add_argument( '-a', '--address',  default='localhost',
                     help="Hostname of target Controller" )
    ap.add_argument( '-v', '--verbose',  default=0, action="count",
                     help="Display logging information." )
    ap.add_argument( '-t', '--timeout',  default=None,
                     help="I/O timeout seconds (default: None)" )
    args			= ap.parse_args()

    # Set up logging level (-v...) and --log <file>
    levelmap 			= {
        0: logging.WARNING,
        1: logging.NORMAL,
        2: logging.DETAIL,
        3: logging.INFO,
        4: logging.DEBUG,
        }
    cpppo.log_cfg['level']	= ( levelmap[args.verbose] 
                                    if args.verbose in levelmap
                                    else logging.DEBUG )
    logging.basicConfig( **cpppo.log_cfg )

    timeout			= None
    if args.timeout is not None:
        timeout			= float( args.timeout )

    process( host=args.address, timeout=timeout )
